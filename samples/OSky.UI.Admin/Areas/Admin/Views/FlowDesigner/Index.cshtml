@model OSky.UI.Dtos.Flow.FlowDesignerDto
@{
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}
@section header{
    <style type="text/css">
        a:focus { outline-style: none; -moz-outline-style: none;}
        a { blr: expression(this.onFocus=this.blur());}

        .workArea { width: 100%; height: 99%; background: url(/Scripts/Flow/images/grid.gif) repeat;}
        .mytable { width: 100%;margin: 0; border-top: solid 1px #ccc; padding: 0px;}
        .mytable td { border-bottom: 1px solid #CCC;border-right: 1px solid #CCC;padding: 5px;}
        .mytable .title { width: 100px;background: #ECF8EA;text-align: right;font-size: 14px;}
    </style>
}

@section footer{
    <script src="~/Scripts/Flow/js/mxClient.js"></script>
    <script type="text/javascript">
        var graph = null;
        var defId = "";
        //mxClient.basePath = "/";
        $(document).ready(function () {
            if (!mxClient.isBrowserSupported()) {
                alert('您的浏览器不支持流程定义器!');
            } else {
                mxConnectionHandler.prototype.connectImage = new mxImage('/Scripts/Flow/images/connector.gif', 16, 16);
                var nodeContainer = $('#nodeBar')[0];
                if (mxClient.IS_IE) {
                    new mxDivResizer(nodeContainer);
                    new mxDivResizer(document.getElementById('toolBar'));
                }
                var nodebar = new mxToolbar(nodeContainer);
                nodebar.enabled = false;
                var workArea = $("<div class=\"workArea\"><div>");
                $('#container').append(workArea);
                if (mxClient.IS_IE) {
                    new mxDivResizer(workArea[0]);
                }
                var model = new mxGraphModel();

                graph = new mxGraph(workArea[0], model);
                graph.convertValueToString = function (cell) {
                    if (mxUtils.isNode(cell.value)) {
                        if (cell.value.nodeName == ('WorkFlowStep')) {
                            var firstName = cell.getAttribute('StepName', '');
                            if (firstName.indexOf("节点名") == 0) {
                                firstName = "节点名" + cell.id;
                                cell.setAttribute('StepName', firstName);
                            }
                            return firstName;
                        } else if (cell.value.nodeName == ('WorkFlowLine')) {
                            var firstName = cell.getAttribute('LineName', '');
                            cell.setAttribute('LineName', firstName);
                            return firstName;
                        }
                    }
                    return '';
                };
                graph.cellEditor.stopEditing = function (a) {
                    if (this.editingCell != null) {
                        var temp = this.editingCell.value;
                        if (this.editingCell.value.nodeName == ('WorkFlowStep')) {
                            temp.setAttribute('StepName', this.getCurrentValue());
                            $('#StepName').val(this.getCurrentValue());
                        } else if (this.editingCell.value.nodeName == ('WorkFlowLine')) {
                            temp.setAttribute('LineName', this.getCurrentValue());
                            $('#LineName').val(this.getCurrentValue());
                        }
                        if (this.textNode != null) {
                            this.textNode.style.visibility = "visible";
                            this.textNode = null
                        } !a && this.isModified() && this.graph.labelChanged(this.editingCell, temp, this.trigger);
                        this.trigger = this.editingCell = null;
                        this.textarea.blur();
                        this.textarea.parentNode.removeChild(this.textarea)
                    }
                }
                graph.setConnectable(true);
                graph.setMultigraph(false);
                graph.setAllowDanglingEdges(false);
                graph.validationAlert = function (a) {
                    if (a == 'alreadyConnected') {
                        a = '节点已经连接';
                    }
                    alert(a);
                }
                var keyHandler = new mxKeyHandler(graph);
                var rubberband = new mxRubberband(graph);
                keyHandler.bindKey(46, function (evt) {
                    if (graph.isEnabled()) {
                        graph.removeCells();
                    }
                });
                var style = graph.getStylesheet().getDefaultEdgeStyle();
                style[mxConstants.STYLE_STROKECOLOR] = '#0C0C0C';
                style[mxConstants.STYLE_LABEL_BACKGROUNDCOLOR] = 'white';
                style[mxConstants.STYLE_EDGE] = mxEdgeStyle.ElbowConnector;
                style[mxConstants.STYLE_ROUNDED] = true;
                style[mxConstants.STYLE_FONTCOLOR] = 'black';
                style[mxConstants.STYLE_FONTSIZE] = '10';
                style = graph.getStylesheet().getDefaultVertexStyle();
                style[mxConstants.STYLE_STROKECOLOR] = 'gray';
                style[mxConstants.STYLE_ROUNDED] = true;
                style[mxConstants.STYLE_SHADOW] = true;
                style[mxConstants.STYLE_FILLCOLOR] = '#DFDFDF';
                style[mxConstants.STYLE_GRADIENTCOLOR] = 'white';
                style[mxConstants.STYLE_FONTCOLOR] = 'black';
                style[mxConstants.STYLE_FONTSIZE] = '12';
                style[mxConstants.STYLE_SPACING] = 4;
                var addVertex = function (icon, w, h, style) {
                    var vertex = new mxCell(null, new mxGeometry(0, 0, w, h), style);
                    vertex.setVertex(true);
                    var img = addToolbarItem(graph, nodebar, vertex, icon, w, h);
                    img.enabled = true;

                    graph.getSelectionModel().addListener(mxEvent.CHANGE, function () {
                        var tmp = graph.isSelectionEmpty();
                        mxUtils.setOpacity(img, (tmp) ? 100 : 20);
                        img.enabled = tmp;
                    });
                };
                addVertex('/Scripts/Flow/images/task_add.png', 100, 40, '');
                graph.getSelectionModel().addListener(mxEvent.CHANGE, function (sender, evt) {
                    var cell = graph.getSelectionCell();
                    if (cell != null) {
                        if (cell.value == null) {
                            var doc = mxUtils.createXmlDocument();
                            var line = doc.createElement('WorkFlowLine')
                            line.setAttribute('LineName', '发送');
                            line.setAttribute('CustomMethod', '');
                            line.setAttribute('Sql', '');
                            line.setAttribute('HandlerIds', '');
                            line.setAttribute('HandlerNames', '');
                            cell.value = line;
                        }
                        graph.container.focus();
                        if (cell == null) {
                            mxUtils.writeln(div, '没有对象被选中。');
                        } else {
                            fillForm(cell);
                        }
                    } else {
                        $('#properties form').hide();
                    }
                    evt.consume();
                });
            }
            //如果是修改 则加载流程
            if ($("#Id").val() != "") {

                $.post("/FlowDesigner/GridData/", { Id: $("#Id").val(), FormId: $("#FormId").val() }, function (data) {
                    if (data && typeof data == "object") {
                        $('#FlowType').val(data.FlowType);
                        $('#FlowName').val(data.FlowName);
                        $('#FlowName').focus();
                        try {
                            model = graph.getModel();
                            model.clear();
                            model.beginUpdate();
                            var doc = mxUtils.parseXml(data.DesignInfo);
                            var dec = new mxCodec(doc.documentElement);
                            dec.decode(doc.documentElement, model);
                            model.endUpdate();
                        } catch (e) {

                        }

                    }

                }, "json");
            }


        });
        //*根据xml信息填充表单
        function fillForm(cell) {
            $('#properties form').hide();
            defId = cell.id;
            var loadForm = function (cell, formId) {
                //文本
                var inputs = $("#" + formId + " input");
                for (var i = 0; i < inputs.length; i++) {
                    if ($(inputs[i]).attr("Id")) {
                        switch ($(inputs[i]).attr("Type")) {
                            case "hidden":
                                $(inputs[i]).val(cell.value.getAttribute($(inputs[i]).attr("Id")));
                                break;
                            case "text":
                                $("#" + $(inputs[i]).attr("Id")).val(cell.value.getAttribute($(inputs[i]).attr("Id")));
                                break;
                            case "checkbox":
                                if (cell.value.getAttribute($(inputs[i]).attr("Id")) != null) {
                                    if (cell.value.getAttribute($(inputs[i]).attr("Id")) == 1) {
                                        $('#' + $(inputs[i]).attr("Id")).attr('checked', true);
                                    } else {
                                        $('#' + $(inputs[i]).attr("Id")).attr('checked', false);
                                    }
                                }
                                break;
                            default:
                                break;
                        }
                    }
                }
                //下拉选择
                var inputs = $("#" + formId + " select");
                for (var i = 0; i < inputs.length; i++) {
                    if ($(inputs[i]).attr("Id")) {
                        $('#' + $(inputs[i]).attr("Id")).val(cell.value.getAttribute($(inputs[i]).attr("Id")));
                    }
                }
                //textarea
                var textareas = $("#" + formId + " textarea");
                for (var i = 0; i < textareas.length; i++) {
                    if ($(textareas[i]).attr("Id")) {
                        $("#" + $(textareas[i]).attr("Id")).val(cell.value.getAttribute($(textareas[i]).attr("Id")));
                    }
                }

                $('#' + formId).show();
            }

            switch (cell.value.nodeName) {
                case "WorkFlowStep":
                    loadForm(cell, "StepForm");
                    break;
                case "WorkFlowLine":
                    loadForm(cell, "LineForm");
                    break;
                default:
                    break;
            }
        }

        function applyHandler(obj) {
            var _this = null;
            var newValue;
            var oldValue;
            if (typeof obj == "object") {
                _this = obj;
            }
            else {
                _this = this;
            }
            var cell = graph.getSelectionCell();
            if (cell == null) {
                cell = graph.getModel().cells[defId];
            }
            if (_this) {
                var key = _this.name || _this.id || '';
                if (key) {
                    var nodeName = '';
                    switch (_this.tagName) {
                        case "INPUT":
                            switch ($("#" + key).attr("Type")) {
                                case "hidden":
                                    newValue = $('#' + key).val();
                                    oldValue = cell.getAttribute(key, '');
                                    nodeName = key;
                                    break;
                                case "text":
                                    newValue = $('#' + key).val();
                                    oldValue = cell.getAttribute(key, '');
                                    nodeName = key;
                                    break;
                                case "checkbox":
                                    newValue = $('#' + key).attr('checked') ? 1 : 0;
                                    oldValue = cell.getAttribute(key, '');
                                    nodeName = key;
                                    break;
                                default:
                                    break;
                            }
                            break;
                        case "SELECT":
                            newValue = $('#' + key).val();
                            oldValue = cell.getAttribute(key, '');
                            nodeName = key;
                            if (key == "StepType") {
                                if (newValue == "0") {
                                    cell.geometry.width = 60;
                                    cell.geometry.height = 60;
                                    graph.getModel().setStyle(cell, "shape=ellipse;fillColor=green");
                                } else if (newValue == "2") {
                                    cell.geometry.width = 60;
                                    cell.geometry.height = 60;
                                    graph.getModel().setStyle(cell, "shape=ellipse;fillColor=red");
                                } else if (newValue == "1") {
                                    cell.geometry.width = 100;
                                    cell.geometry.height = 40;
                                    graph.getModel().setStyle(cell, "");
                                }
                            }
                            break;
                        case "TEXTAREA":
                            newValue = $('#' + key).val();
                            oldValue = cell.getAttribute(key, '');
                            nodeName = key;
                            break;
                        default:

                            break;
                    }
                    if (newValue != oldValue) {
                        graph.getModel().beginUpdate();
                        try {
                            var edit = new mxCellAttributeChange(cell, nodeName, newValue);
                            graph.getModel().execute(edit);
                        } finally {
                            graph.getModel().endUpdate();
                            graph.setSelectionCell(cell);
                        }
                    }
                }
            }
        }
        //验证当前流程设计信息
        function validGraph() {
            if (!$('#divForm').form('enableValidation').form('validate'))
                return false;
            return true;
        }
        //保存流程信息
        function saveFlow() {
            var flag = confirm('确认保存流程?');
            if (flag == true) {
                if (validGraph()) {
                    var encoder = new mxCodec();
                    var node = encoder.encode(graph.getModel());
                    var xml = encodeURIComponent(mxUtils.getPrettyXml(node));
                    mxUtils.post('/Admin/FlowDesigner/Save/',
                        'FlowType=' + $("#FlowType").combobox('getValue') + '&FlowName=' + $("#FlowName").val() + '&DesignInfo=' + xml + "&Id=" + $("#Id").val() + "&FormId=" + $("#FormId").val(),
                        function (req) {
                            var rtn = req.getText();
                            var obj = eval("(" + rtn + ")");
                            operationResult(obj, function (obj) {
                                $("#Id").val(obj.Data);
                                document.location.href = "/Admin/Form/Index";
                            });
                        },
                        false
                    );
                }
            }
            else {
                return false;
            }

        }
        //*添加步骤
        function addToolbarItem(graph, toolbar, prototype, image, w, h) {
            var funct = function (graph, evt, cell, x, y) {
                graph.stopEditing(false);
                var doc = mxUtils.createXmlDocument();
                var step = doc.createElement('WorkFlowStep');
                step.setAttribute('Id', '');
                step.setAttribute('StepType', '1');
                step.setAttribute('StepName', '节点名');
                step.setAttribute('CountersignType', '0');
                step.setAttribute('CountersignStrategy', '0');
                step.setAttribute('CountersignPer', '100');
                step.setAttribute('BackType', '1');
                step.setAttribute('SpecifiedBackStep', '');
                step.setAttribute('SpecifiedDay', '-1');
                step.setAttribute('StepDescription', '');
                step.setAttribute('IsArchives', '0');
                var vertex = graph.insertVertex(graph.getDefaultParent(), null, step, x, y, w, h);
                graph.setSelectionCell(vertex);
            }
            var img = toolbar.addMode(null, image, function (evt, cell) {
                var pt = this.graph.getPointForEvent(evt);
                funct(graph, evt, cell, pt.x, pt.y);
            });
            mxEvent.addListener(img, 'mousedown', function (evt) {
                if (img.enabled == false) {
                    mxEvent.consume(evt);
                }
            });
            mxUtils.makeDraggable(img, graph, funct);
            return img;
        }
        //通用
        function operationResult(data, fun) {
            try {
                if (data.ResultType == 3) {
                    if (typeof fun == "function") {
                        fun(data);
                    }
                } else if (data.ResultType == 0) {
                    alert(data.Message);
                } else if (data.ResultType == 2) {
                    alert("此次操作没有数据受到影响!");
                } else {
                    alert(data.Message);
                }
            } catch (e) {
                alert(e.message);
            }
        }

        //选择步骤处理者
        function selectUser(IdsName, NaName) {
            $.OSky.layer.msg.open(2, "@Url.Action("SelectUsers")?Ids=" + $("#HandlerIds").val(), true,
                   function (index, layero) {
                       //var $tree = $(layero).find("iframe").contents().find("#tree-organization");
                       var nodes = $(layero).find("iframe")[0].contentWindow.getCheckedNodes();
                       if (nodes.length == 0) {
                           document.getElementById("HandlerIds").value = "";
                           applyHandler(document.getElementById("HandlerIds"));
                           document.getElementById("HandlerNames").value = "";
                           applyHandler(document.getElementById("HandlerNames"));
                           return;
                       }
                       var ids = $.Enumerable.From(nodes).Select("$.Id").ToArray().join();
                       var names = $.Enumerable.From(nodes).Select("$.Name").ToArray().join();
                       document.getElementById("HandlerIds").value = ids;
                       applyHandler(document.getElementById("HandlerIds"));
                       document.getElementById("HandlerNames").value = names;
                       applyHandler(document.getElementById("HandlerNames"));
                   });
        }
    </script>

}
<div class="easyui-layout" data-options="fit:true" id="divForm">
    <input id="Id" value="@Model.Id" type="hidden" />
    <input id="FormId" value="@Model.FormId" type="hidden" />
    <div data-options="region:'north',title:''" style="padding: 10px 30px; height: 50px;" id="toolBar">
        <b>流程类型：</b>
        <select id="FlowType" class="easyui-combobox" style="width: 150px" data-options="required:true,editable:false">
            <option value="1" selected="selected">事项审批流程</option>
            <option value="2">其他流程</option>
        </select> &nbsp;
        <b>流程名称：</b>
        <input class="easyui-validatebox textbox" data-options="required:true,validType:'length[2,20]'" type="text" id="FlowName" style="width: 200px;" />&nbsp;
        <input type="button" class="btn btn-danger" value="确 定" onclick="saveFlow()">
    </div>

    <div data-options="region:'west',split:true" title="步骤" style="width: 100px;" id="nodeBar"></div>
    <div data-options="region:'east',split:true" title="属性" style="width: 310px; position: relative; overflow-x: hidden" id="properties">
        <form id="StepForm" name="StepForm" style="display: none">
            <table class="mytable" cellpadding="0" cellspacing="0">
                <tr>
                    <td colspan="2" class="title" style="text-align: center; font-weight: bold">
                        流程步骤
                    </td>
                </tr>
                <tr>
                    <td class="title">步骤类型:</td>
                    <td>
                        <select id="StepType" name="StepType" style="width: 168px;" class="combo"
                                onchange="applyHandler(this)">
                            <option value="0">起始</option>
                            <option value="1">中间</option>
                            <option value="2">结束</option>
                        </select>
                    </td>
                </tr>
                <tr>
                    <td class="title">步骤名称:</td>
                    <td>
                        <input type="text" class="easyui-validatebox textbox" onchange="applyHandler(this)"
                               id="StepName" name="StepName" style="width: 146px" />
                    </td>
                </tr>
                <tr>
                    <td class="title">审签类型:</td>
                    <td>
                        <select id="CountersignType" name="CountersignType" style="width: 168px;" class="combo"
                                onchange="applyHandler(this)">
                            <option value="0">无签批意见栏</option>
                            <option value="1">有签批意见栏</option>
                            <option value="2">有签批意见栏且需要盖章</option>
                        </select>
                    </td>
                </tr>
                <tr>
                    <td class="title">会签策略:</td>
                    <td>
                        <select id="CountersignStrategy" name="CountersignStrategy" style="width: 168px;" class="combo"
                                onchange="applyHandler(this)">
                            <option value="0">所有人必须同意</option>
                            <option value="1">一人同意即可</option>
                            <option value="2">比例同意</option>
                        </select>
                    </td>
                </tr>
                <tr>
                    <td class="title">会签比例(%):</td>
                    <td>
                        <input type="text" class="easyui-validatebox textbox" onchange="applyHandler(this)"
                               id="CountersignPer" name="CountersignPer" style="width: 146px" />
                    </td>
                </tr>
                <tr>
                    <td class="title">退回类型:</td>
                    <td>
                        <select id="BackType" name="BackType" style="width: 168px;" class="combo"
                                onchange="applyHandler(this)">
                            <option value="0">无退回</option>
                            <option value="1">退回到上一步</option>
                            <option value="2">退回到第一步</option>
                            <option value="3">退回到指定步骤</option>
                        </select>
                    </td>
                </tr>
                <tr>
                    <td class="title">指定步骤:</td>
                    <td>
                        <input type="text" class="textbox" onchange="applyHandler(this)"
                               id="SpecifiedBackStep" name="SpecifiedBackStep" style="width: 146px" />
                    </td>
                </tr>
                <tr>
                    <td class="title">时限(天):</td>
                    <td>
                        <input type="text" class="easyui-validatebox textbox" onchange="applyHandler(this)"
                               id="SpecifiedDay" name="SpecifiedDay" style="width: 146px" /><br />
                        <span style="color: #FF3030;width:100%;font-size:0.8em;">-1无限；0即时；其他表示天数</span>
                    </td>
                </tr>
                <tr>
                    <td class="title">步骤说明:</td>
                    <td>
                        <textarea class="textbox" id="StepDescription" name="StepDescription" onchange="applyHandler(this)" style="height:60px;width:146px" ></textarea>
                    </td>
                </tr>
                <tr>
                    <td class="title">归档类型:</td>
                    <td>
                        <select id="IsArchives" name="IsArchives" style="width: 168px;" class="combo"
                                onchange="applyHandler(this)">
                            <option value="0">不归档</option>
                            <option value="1">流程归档</option>
                        </select><br />
                        <span style="color: #FF3030;width:100%;font-size:0.8em;">注：流程结束才能归档</span>
                    </td>
                </tr>
            </table>
        </form>
        <form id="LineForm" name="LineForm" style="display: none;">
            <table class="mytable" cellpadding="0" cellspacing="0">
                <tr>
                    <td colspan="2" class="title" style="text-align: center; font-weight: bold">
                        流程动作
                    </td>
                </tr>
                <tr>
                    <td class="title">前端效验:</td>
                    <td>
                        <textarea name="CustomMethod" id="CustomMethod" onchange="applyHandler(this)" style="height:80px;width:190px;"></textarea>
                    </td>
                </tr>
                <tr>
                    <td class="title">Sql效验:</td>
                    <td>
                        <textarea name="Sql" id="Sql" onchange="applyHandler(this)" style="height:80px;width:190px;"></textarea>
                    </td>
                </tr>
                <tr>
                    <td class="title">默认处理人:</td>
                    <td>
                        <input type="hidden" name="HandlerIds" id="HandlerIds" />
                        <textarea name="HandlerNames" id="HandlerNames" onchange="applyHandler(this)" style="height: 80px; width: 190px; cursor: not-allowed; background: #DFDFDF;" readonly="readonly" ></textarea>
                        <input type="button" class="btn btn-primary" value="设置默认人" onclick="selectUser('HandlerIds', 'HandlerNames')">
                    </td>
                </tr>
            </table>
        </form>
    </div>
    <div data-options="region:'center',title:'流程图'" id="container"></div>

</div>

